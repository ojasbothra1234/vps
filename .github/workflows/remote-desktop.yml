# .github/workflows/kali-vm.yml

name: Create Kali Linux Remote VM

on:
  # This allows you to run the workflow manually from the Actions tab in your GitHub repository.
  workflow_dispatch:

jobs:
  build:
    name: Start Kali Linux Environment
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kali Linux with XRDP & LocalXpose
        run: |
          echo "################################################################"
          echo "## 1. Starting Kali Linux Docker container..."
          echo "################################################################"
          # We run the container in detached mode, name it 'kali', and map port 3389.
          # The 'tail -f /dev/null' command is a simple trick to keep the container running.
          docker run -d --name kali -p 3389:3389 kalilinux/kali-rolling tail -f /dev/null
          sleep 10 # Give the container a moment to initialize.

          echo "################################################################"
          echo "## 2. Installing Desktop Environment and XRDP..."
          echo "################################################################"
          # We execute commands inside the running 'kali' container.
          docker exec kali bash -c "apt-get update && apt-get install -y kali-desktop-xfce xrdp"

          echo "################################################################"
          echo "## 3. Setting a root password for RDP login..."
          echo "## IMPORTANT: The default password is 'kali'. CHANGE THIS!"
          echo "################################################################"
          docker exec kali bash -c 'echo "root:kali" | chpasswd'

          echo "################################################################"
          echo "## 4. Starting the XRDP service..."
          echo "################################################################"
          docker exec kali bash -c "service xrdp start"
          
          echo "################################################################"
          echo "## 5. Setting up LocalXpose to expose the RDP port..."
          echo "################################################################"
          # Download and unzip the LocalXpose client on the runner host.
          curl -sL https://api.localxpose.io/api/v2/downloads/loclx-linux-amd64.zip -o loclx.zip
          unzip loclx.zip
          
          echo "################################################################"
          echo "## 6. Starting Tunnel. Look for the TCP URL below to connect."
          echo "## The workflow will run for up to 6 hours or until you cancel it."
          echo "################################################################"
          # Run LocalXpose to create a public TCP tunnel to the container's RDP port.
          # This command will keep running, holding the job open.
          ./loclx tunnel tcp --to 127.0.0.1:3389 --authtoken ${{ secrets.LOCALTUNNEL_TOKEN }}
